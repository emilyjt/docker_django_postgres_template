version: "3.9"

networks:
  django:
    driver: overlay

  traefik-public:
    external: true

services:
  # -------------------------------------------------------
  # Django
  # -------------------------------------------------------
  django:
    build:
      context: ./www
      dockerfile: ./docker/Dockerfile
      args:
        SERVICENAME: ${SERVICENAME}
        REQUIREMENTS: requirements.txt # this is the name of the requirements file you wish to be installed
    command: >
      sh -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 2 --threads 2
      "
    depends_on:
      - postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      #
      - POSTGRES_HOST=${POSTGRES_HOST?Variable not set}
      - REDIS_URL=${REDIS_URL?Variable not set}
      - DJANGO_ADMIN_URL=${DJANGO_ADMIN_URL?Variable not set}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS?Variable not set}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY?Variable not set}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE?Variable not set}
    # image: <your-private-registry>/${DOMAINNAME}-django:latest
    image: ${DOMAINNAME}-django:latest
    networks:
      - django
    volumes:
      - ./www/django/src/${SERVICENAME}/staticfiles:/app/django/staticfiles
      - ./www/django/src/${SERVICENAME}/mediafiles:/app/django/mediafiles
  # -------------------------------------------------------
  # Postgres
  # -------------------------------------------------------
  postgres:
    environment:
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
    image: postgres:13-alpine
    networks:
      - django
    volumes:
      - ./www/database:/var/lib/postgresql/data/
  # -------------------------------------------------------
  # NGINX
  # -------------------------------------------------------
  nginx:
    depends_on:
      - django
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label=traefik-public
        ## Routers rules
        - traefik.http.routers.${SERVICENAME}-rtr.rule=Host(`www.$DOMAINNAME`) || Host(`$DOMAINNAME`)
        - traefik.http.routers.${SERVICENAME}-rtr.entrypoints=websecure
        - traefik.http.routers.${SERVICENAME}-rtr.tls=true
        - traefik.http.routers.${SERVICENAME}-rtr.tls.certresolver=letsencrypt
        ## Middlewares rules
        - traefik.http.routers.${SERVICENAME}-rtr.middlewares=www-redirect@file
        ## Services rules
        - traefik.http.services.${SERVICENAME}-rtr.loadbalancer.server.port=80
    image: nginx:alpine
    networks:
      - django
      - traefik-public
    volumes:
      - ./www/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./www/nginx/conf.d:/etc/nginx/conf.d
      - ./www/nginx/logs:/var/log/nginx
      - ./www/django/src/${SERVICENAME}/staticfiles:/app/django/staticfiles
      - ./www/django/src/${SERVICENAME}/mediafiles:/app/django/mediafiles
  # -------------------------------------------------------
  # redis
  # -------------------------------------------------------
  redis:
    image: redis:6
    networks:
      - django
